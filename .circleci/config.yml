version: 2

references:
  container_config_node: &container_config_node
    docker:
      - image: circleci/node:10.8.0

  container_config_python: &container_config_python
    docker:
      - image: circleci/python:3.6.1

  workspace_root: &workspace_root
    /tmp/workspace

  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

  deploy_job_requirements: &deploy_job_requirements
    requires:
      - build
      - download_terraform

  deploy_environment_variables: &deploy_environment_variables
    environment: &environment
      TF_VERSION: 0.11.10
      TF_LOG: debug

  terraform_cache_key: &terraform_cache_key
    terraform-cache-beta-v1-0.11.10

  terraform_cache_path: &terraform_cache_path
    ~/0.11.10

  restore_terraform: &restore_terraform
    restore_cache:
      keys:
        - *terraform_cache_key

  output_terraform_version: &output_terraform_version
    run:
      name: Output terraform version
      command: terraform version

  export_terraform_client_to_path: &export_terraform_client_to_path
    run:
      name: Export terraform client to path
      command: echo 'export PATH=~/${TF_VERSION}:$PATH' >> $BASH_ENV

  install_aws_cli: &install_aws_cli
    run:
      name: Install AWS cli
      command: pip install awscli --upgrade --user

  export_awscli_to_path: &export_awscli_to_path
    run:
      name: Export awscli to path
      command: echo 'export PATH=~/.local/bin:$PATH' >> $BASH_ENV

  output_aws_cli_version: &output_aws_cli_version
    run:
      name: Output aws version
      command: aws --version

jobs:
  build:
    docker:
      - image: circleci/node:10.8.0
    steps:
      - *attach_workspace
      - checkout
      - run:
          name: build lambda packages
          command: ./build.sh
      - run:
          name: show build dir contents
          command: ls build
      - run:
          name: move build dir to workspace
          command: cp -R build /tmp/workspace
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - build

  download_terraform:
    <<: *container_config_node
    <<: *deploy_environment_variables
    steps:
      - *restore_terraform
      - run: mkdir -p ~/${TF_VERSION}
      - run: if [[ ! -e ~/${TF_VERSION}/terraform ]]; then wget https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip -O t.zip && unzip t.zip -d ~/${TF_VERSION}; fi
      - save_cache:
          key: *terraform_cache_key
          paths:
            - *terraform_cache_path

  deploy_custom:
    <<: *container_config_python
    <<: *deploy_environment_variables
    steps:
      - *attach_workspace
      - checkout
      - *restore_terraform
      - *export_terraform_client_to_path
      - *output_terraform_version
      - *install_aws_cli
      - *export_awscli_to_path
      - *output_aws_cli_version
      - run:
          name: restore build dir into workspace (for terraform to use)
          command: cp -R /tmp/workspace/build build
      - run:
          working_directory: terraform/
          name: "Initialize Terraform: download providers and setup backend"
          command: terraform init -reconfigure
      - run:
          working_directory: terraform/
          name: "Select Terraform Workspace: select state context"
          command: terraform workspace select ${CIRCLE_PR_USERNAME:-$CIRCLE_USERNAME} || terraform workspace new ${CIRCLE_PR_USERNAME:-$CIRCLE_USERNAME}
      - run:
          working_directory: terraform/
          name: "Generate Terraform Infrastructure Plan"
          command: |
            terraform plan -var "stage=${CIRCLE_PR_USERNAME:-$CIRCLE_USERNAME}" \
              -out=tf.tfplan
      - run:
          working_directory: terraform/
          name: "Apply Terraform Infrastructure Plan"
          command: terraform apply tf.tfplan

  deploy_staging:
    <<: *container_config_python
    <<: *deploy_environment_variables
    steps:
      - *attach_workspace
      - checkout
      - *restore_terraform
      - *export_terraform_client_to_path
      - *output_terraform_version
      - *install_aws_cli
      - *export_awscli_to_path
      - *output_aws_cli_version
      - run:
          name: restore build dir into workspace (for terraform to use)
          command: cp -R /tmp/workspace/build build
      - run:
          working_directory: terraform/
          name: "Initialize Terraform: download providers and setup backend"
          command: terraform init -reconfigure
      - run:
          working_directory: terraform/
          name: "Select Terraform Workspace: select state context"
          command: terraform workspace select staging || terraform workspace new staging
      - run:
          working_directory: terraform/
          name: "Generate Terraform Infrastructure Plan"
          command: |
            terraform plan -var "stage=staging" \
              -out=tf.tfplan
      - run:
          working_directory: terraform/
          name: "Apply Terraform Infrastructure Plan"
          command: terraform apply tf.tfplan

  deploy_production:
    <<: *container_config_python
    <<: *deploy_environment_variables
    steps:
      - *attach_workspace
      - checkout
      - *restore_terraform
      - *export_terraform_client_to_path
      - *output_terraform_version
      - *install_aws_cli
      - *export_awscli_to_path
      - *output_aws_cli_version
      - run:
          name: restore build dir into workspace (for terraform to use)
          command: cp -R /tmp/workspace/build build
      - run:
          working_directory: terraform/
          name: "Initialize Terraform: download providers and setup backend"
          command: terraform init -reconfigure
      - run:
          working_directory: terraform/
          name: "Select Terraform Workspace: select state context"
          command: terraform workspace select prod || terraform workspace new prod
      - run:
          working_directory: terraform/
          name: "Generate Terraform Infrastructure Plan"
          command: |
            terraform plan -var "stage=prod" \
              -out=tf.tfplan
      - run:
          working_directory: terraform/
          name: "Apply Terraform Infrastructure Plan"
          command: terraform apply tf.tfplan

workflows:
  version: 2

  branch_deploy:
    jobs:
      - download_terraform
      - build
      - deploy_staging:
          <<: *deploy_job_requirements
          filters:
            branches:
              only:
                - master
      - deploy_custom:
          <<: *deploy_job_requirements
          filters:
            branches:
              ignore:
                - master

  production_deploy:
    jobs:
      - download_terraform:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - build:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - deploy_production:
          <<: *deploy_job_requirements
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
